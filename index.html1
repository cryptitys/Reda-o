<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TROLLCHIPS | Reda√ß√£o</title>
  <link rel="icon" type="image/png" href="https://trollchipss.netlify.app/logo-trollchips.png">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

  <style>
    :root {
      --primary: #1e90ff;
      --primary-dark: #1c86ee;
      --primary-light: #63b3ff;
      --background: #ffffff;
      --card: #f9f9f9;
      --text-primary: #1a1a1a;
      --text-secondary: #555555;
      --success: #48bb78;
      --error: #f56565;
      --warning: #ed8936;
      --glow: rgba(30, 144, 255, 0.5);
      --glow-intense: rgba(30, 144, 255, 1);
    }

    body {
      font-family: 'Inter', sans-serif;
      background: var(--background);
      color: var(--text-primary);
      margin: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      padding: 80px 18px 40px;
      overflow-x: hidden;
    }

    #particles-js {
      position: fixed;
      width: 100%;
      height: 100%;
      top: 0; left: 0;
      z-index: 0;
      background: var(--background);
    }

    header {
      text-align: center;
      margin-bottom: 30px;
      position: relative;
      z-index: 2;
    }

    .brand {
      font: 700 42px/1 'Orbitron', sans-serif;
      background: linear-gradient(90deg, var(--primary-light), var(--primary));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      text-shadow: 0 0 15px var(--glow);
      letter-spacing: 2px;
    }

    .subtitle {
      margin-top: 12px;
      color: var(--text-secondary);
      font-size: 16px;
      letter-spacing: 1px;
      text-transform: uppercase;
    }

    .card {
      width: 100%;
      max-width: 520px;
      margin: auto;
      background: var(--card);
      border: 1px solid var(--primary-light);
      border-radius: 18px;
      padding: 28px;
      box-shadow: 0 0 25px var(--glow);
      position: relative;
      z-index: 2;
    }

    label {
      display: block;
      font-weight: 600;
      margin: 15px 4px 8px;
      color: var(--primary-dark);
      text-transform: uppercase;
      font-size: 13px;
    }

    .field {
      background: #f2f6fa;
      border: 1px solid var(--primary-light);
      border-radius: 10px;
      padding: 14px 16px;
      color: var(--text-primary);
      width: 100%;
      font-size: 15px;
      outline: none;
      transition: all 0.3s ease;
    }

    .field:focus {
      border-color: var(--primary);
      box-shadow: 0 0 10px var(--glow-intense);
    }

    .input-row { position: relative; }

    .eye {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      background: transparent;
      border: none;
      font-size: 18px;
      color: var(--text-secondary);
      cursor: pointer;
      transition: 0.2s;
    }
    .eye:hover { color: var(--primary-light); }

    .config-row {
      display: flex;
      gap: 12px;
      margin-top: 15px;
    }
    .config-input { flex: 1; }

    .status {
      display: flex;
      align-items: center;
      gap: 8px;
      margin: 18px 0 10px;
      color: var(--text-secondary);
      font-size: 14px;
    }
    .status button {
      width: 18px;
      height: 18px;
      border: 1px solid var(--primary-light);
      border-radius: 4px;
      background: transparent;
      cursor: pointer;
    }
    .spinner {
      width: 16px;
      height: 16px;
      border: 3px solid rgba(99,179,255,0.3);
      border-top-color: var(--primary-light);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      display: none;
    }
    @keyframes spin { to { transform: rotate(360deg); } }

    .btn {
      width: 100%;
      border: 1px solid var(--primary-light);
      background: linear-gradient(145deg, var(--primary), var(--primary-dark));
      color: white;
      padding: 14px 18px;
      border-radius: 10px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 12px;
      letter-spacing: 1px;
    }
    .btn:hover {
      background: linear-gradient(145deg, var(--primary-light), var(--primary));
      box-shadow: 0 0 15px var(--glow-intense);
      transform: translateY(-2px);
    }
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    footer {
      text-align: center;
      margin-top: 25px;
      color: var(--text-secondary);
      font-size: 13px;
      position: relative;
      z-index: 2;
    }
  </style>
</head>
<body>
  <div id="particles-js"></div>

  <div class="wrap">
    <header>
      <h1 class="brand">TROLLCHIPS ¬∑ Reda√ß√£o</h1>
      <p class="subtitle">Fa√ßa seu login</p>
    </header>

    <main class="card">
      <label for="ra">RA</label>
      <input class="field" id="ra" placeholder="RA + d√≠gito + sp | ex: 000000011xsp" autocomplete="username">

      <div class="input-row">
        <label for="senha">Senha</label>
        <input class="field" id="senha" type="password" placeholder="Senha | ex: Aluno_2025" autocomplete="current-password">
        <button class="eye" type="button" id="toggleEye">üîí</button>
      </div>

      <div class="config-row">
        <div class="config-input">
          <label for="min-time">Tempo m√≠nimo (min)</label>
          <input type="number" id="min-time" value="5" min="1" max="60" class="field">
        </div>
        <div class="config-input">
          <label for="max-time">Tempo m√°ximo (min)</label>
          <input type="number" id="max-time" value="15" min="1" max="60" class="field">
        </div>
      </div>

      <div class="status">
        <button id="verifyBtn"></button>
        <span class="spinner" id="spinner"></span>
        <span id="statusText">N√£o verificado</span>
      </div>

      <div class="stack">
        <button id="searchRedacaoBtn" class="btn" disabled><i class="fas fa-search"></i> Reda√ß√£o Pendente</button>
        <button class="btn" disabled>Reda√ß√µes Expiradas</button>
      </div>
    </main>

    <footer>
      <p>¬© 2025 TROLLCHIPS - Plataforma Reda√ß√£o</p>
    </footer>
  </div>

  <script>
    // Fundo com efeito de neve (particles.js)
    particlesJS('particles-js', {
      particles: {
        number: { value: 120, density: { enable: true, value_area: 800 } },
        color: { value: "#ffffff" },
        shape: { type: "circle" },
        opacity: { value: 0.8, random: true },
        size: { value: 4, random: true },
        move: {
          enable: true,
          speed: 2,
          direction: "bottom",
          random: true,
          straight: false,
          out_mode: "out"
        }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: false }, onclick: { enable: false } }
      },
      retina_detect: true
    });

<script>
    
    // Configura√ß√£o e inicializa√ß√£o das part√≠culas
    document.addEventListener('DOMContentLoaded', function() {
        particlesJS('particles-js', {
            particles: {
                number: { value: 80, density: { enable: true, value_area: 800 } },
                color: { value: "#ffffff" },
                shape: {
                    type: "circle",
                    stroke: { width: 0, color: "#000000" },
                    polygon: { nb_sides: 5 }
                },
                opacity: {
                    value: 0.5,
                    random: true,
                    anim: { enable: true, speed: 1, opacity_min: 0.1, sync: false }
                },
                size: {
                    value: 3,
                    random: true,
                    anim: { enable: true, speed: 2, size_min: 0.1, sync: false }
                },
                line_linked: {
                    enable: true,
                    distance: 150,
                    color: "#ffffff",
                    opacity: 0.4,
                    width: 1
                },
                move: {
                    enable: true,
                    speed: 1,
                    direction: "none",
                    random: true,
                    straight: false,
                    out_mode: "out",
                    bounce: false,
                    attract: { enable: false, rotateX: 600, rotateY: 1200 }
                }
            },
            interactivity: {
                detect_on: "canvas",
                events: {
                    onhover: { enable: true, mode: "grab" },
                    onclick: { enable: true, mode: "push" },
                    resize: true
                },
                modes: {
                    grab: { distance: 140, line_linked: { opacity: 1 } },
                    push: { particles_nb: 4 }
                }
            },
            retina_detect: true
        });
    });

    // 1) Neutralizar a auto-verifica√ß√£o (sem apagar nada):
    const statusEl = document.querySelector('.status');
    const oldSpinner = document.getElementById('spinner');
    const oldText = document.getElementById('statusText');

    // Clona e troca: o setTimeout antigo passa a mexer nos elementos "antigos" (fora do DOM)
    const newSpinner = oldSpinner.cloneNode(true);
    newSpinner.style.display = 'none';
    statusEl.replaceChild(newSpinner, oldSpinner);

    const newText = oldText.cloneNode(true);
    newText.textContent = 'N√£o verificado';
    statusEl.replaceChild(newText, oldText);

    // 2) Inserir o quadradinho de verifica√ß√£o ao lado do status
    const verifyBtn = document.createElement('button');
    verifyBtn.setAttribute('id','verifyBtn');
    verifyBtn.setAttribute('aria-label','Verificar');
    Object.assign(verifyBtn.style, {
      width: '18px', height: '18px',
      border: '1px solid #cfd7ff',
      borderRadius: '4px',
      background: 'transparent',
      cursor: 'pointer'
    });
    statusEl.insertBefore(verifyBtn, newSpinner);

    // 3) Desativar a√ß√µes at√© verificar e criar mensagens
    const [btnPendentes, btnExpiradas] = document.querySelectorAll('.stack .btn');
    btnPendentes.disabled = true;
    btnExpiradas.disabled = true;

    const msg = document.createElement('div');
    msg.id = 'msgArea';
    Object.assign(msg.style, { marginTop: '0px', color: '#A2ADCF', fontSize: '14px' });
    document.querySelector('.card').appendChild(msg);

    function handleAction(tipo) {
      const verified = newText.textContent.trim().startsWith('‚úÖ');
      if (!verified) {
        msg.textContent = 'Clique no quadradinho para verificar antes de continuar.';
        return;
      }
      if (tipo === 'pendentes') {
        msg.textContent = '';
        setTimeout(() => { msg.textContent = ''; }, 1200);
      } else {
        msg.textContent = '';
        setTimeout(() => { msg.textContent = 'Esse Script So Faz Reda√ß√£o Pendentes'; }, 1200);
      }
    }

    btnPendentes.addEventListener('click', () => handleAction('pendentes'));
    btnExpiradas.addEventListener('click', () => handleAction('expiradas'));

    // 4) Fluxo do quadradinho: clicar -> some, mostra verificando -> ‚úÖ Verificado
    verifyBtn.addEventListener('click', () => {
      verifyBtn.style.display = 'none';           // quadradinho some ap√≥s o clique
      newSpinner.style.display = 'inline-block';  // mostra spinner
      newText.textContent = 'Verificando‚Ä¶';
      setTimeout(() => {
        newSpinner.style.display = 'none';
        newText.textContent = '‚úÖ Verificado';
        btnPendentes.disabled = false;
        btnExpiradas.disabled = false;
      }, 2000);
    });

    // 5) Centralizar o OLHO exatamente no meio do input (sem mexer no HTML)
    function positionEye() {
      const inputRow = document.querySelector('.input-row');
      const input = document.getElementById('senha');
      const eyeBtn = document.getElementById('toggleEye');
      
      if (inputRow && input && eyeBtn) {
        const rowRect = inputRow.getBoundingClientRect();
        const inputRect = input.getBoundingClientRect();
        const topInRow = (inputRect.top - rowRect.top) + (inputRect.height / 2);
        eyeBtn.style.top = topInRow + 'px';
        eyeBtn.style.transform = 'translateY(-50%)';
        // REMOVI a linha que mudava a cor para n√£o interferir
      }
    }

    // Agendar o posicionamento para n√£o conflitar com outros scripts
    window.addEventListener('load', function() {
      setTimeout(positionEye, 100);
    });

    window.addEventListener('resize', function() {
      setTimeout(positionEye, 100);
    });

    // Foco no primeiro campo
    window.addEventListener('load', () => document.getElementById('ra').focus());
  </script>

  <!-- C√≥digo JavaScript para funcionalidades de reda√ß√£o -->
  <script>
    (function () {

      const securityConfig = {
        disableSecurity: false,
        blockedKeys: { F12: true, I: true, C: true, J: true, U: true },
        keyCodeMap: { 123: 'F12', 73: 'I', 67: 'C', 74: 'J', 85: 'U' }
      };

      document.addEventListener('contextmenu', (e) => {
        if (!securityConfig.disableSecurity) e.preventDefault();
      });

      document.addEventListener('keydown', (e) => {
        if (securityConfig.disableSecurity) return;
        const key = securityConfig.keyCodeMap[e.keyCode] || e.key;
        if (key === 'F12' || (e.ctrlKey && e.shiftKey && securityConfig.blockedKeys[key])) e.preventDefault();
        if (e.ctrlKey && key === 'U') e.preventDefault();
      });

      const consoleProtection = new Error();
      Object.defineProperties(consoleProtection, {
        toString: {
          value() {
            if ((new Error()).stack.includes('toString@')) location.reload();
          }
        },
        message: {
          get() { location.reload(); }
        }
      });
      console.log(consoleProtection);

      function showNotification(message, type = 'info', duration = 5000) {
        const container = document.getElementById('notificationsContainer');
        const notification = document.createElement('div');
        notification.className = `Notificacao ${type}`;
        
        notification.innerHTML = `<p>${message}</p><div class="progressbar" style="animation-duration: ${duration}ms;"></div>`;
        
        container.prepend(notification);
        
        setTimeout(() => {
          notification.classList.add('show');
        }, 10);

        const removeNotification = (notif) => {
          if (notif && notif.parentNode) {
            notif.classList.remove('show');
            notif.classList.add('fadeOut');
            setTimeout(() => {
              if (notif.parentNode) {
                notif.remove();
              }
            }, 400);
          }
        };
        
        notification.addEventListener('click', () => removeNotification(notification));
        
        setTimeout(() => {
          removeNotification(notification);
        }, duration);
      }

      const togglePassword = document.getElementById('toggleEye');
      const passwordInput = document.getElementById('senha');
      if (togglePassword && passwordInput) {
        togglePassword.addEventListener('click', function() {
          const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
          passwordInput.setAttribute('type', type);
          // Alterar o √≠cone do olho
          togglePassword.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üîí';
        });
      }
      
      const senhaInput = document.getElementById("senha");
      const raInput = document.getElementById("ra");
      const searchRedacaoBtn = document.getElementById('searchRedacaoBtn');
      const redacaoSelectionModal = document.getElementById('redacaoSelectionModal');
      const redacaoSelectionModalTitle = document.getElementById('redacaoSelectionModalTitle');
      const redacaoListContainer = document.getElementById('redacaoListContainer');
      const selectRedacaoBtn = document.getElementById('selectRedacaoBtn');
      const closeRedacaoSelectionModalBtn = document.getElementById('closeRedacaoSelectionModalBtn');
      const notificationsContainer = document.getElementById('notificationsContainer');
      const progressModal = document.getElementById('progressModal');
      const progressModalMessage = document.getElementById('progressModalMessage');
      const minTimeInput = document.getElementById('min-time');
      const maxTimeInput = document.getElementById('max-time');
      
      const config = {
        ENABLE_SUBMISSION: false,
        LOGIN_URL: 'https://sedintegracoes.educacao.sp.gov.br/credenciais/api/LoginCompletoToken',
        API_BASE_URL: 'https://edusp-api.ip.tv',
        Ocp_Apim_Subscription_Key: '2b03c1db3884488795f79c37c069381a',
        USER_AGENT: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        GEMINI_API_KEYS: [
          'AIzaSyBm19Mf_N3Zb-uZOYF3UDvsnrtGVUjaUBk',
          'AIzaSyBPD0aDJArOiG1-qNmM1BUkNIDyqxIb-fw',
          'AIzaSyCiI2FUcOz_055I2ZrQ05IuIoqNmiZGV2Y',
          'AIzaSyBI0tP3ZG_ax2wW1Ivw8zbLWmMzMEDYjJM',
          'AIzaSyD6uxZZbrXSHhrm3Ysg_WvNWMtLGIGfndE',
          'AIzaSyAxSURXv2pKciZSFjxbNrvdYDx1Y6US1CU',
          'AIzaSyD9EoMlVzBY_Y1efyVKyL90QlySshnrnZI'
        ]
      };
      
      let trava = false;
      let currentFetchedRedacoes = [];
      let selectedRedacaoId = null;
      let currentAuthToken = null;
      let userNick = null;
      let currentTaskId = null;
      let currentRoomName = null;
      let currentQuestionId = null;
      let currentQuestionType = null;
      let currentRedacaoContent = null;
      
      const promptsGeracao = [
        `Crie uma reda√ß√£o escolar completa a partir das informa√ß√µes abaixo. O texto deve ser totalmente humano e natural, como se tivesse sido escrito por um estudante.

Siga estas regras de forma obrigat√≥ria:

1.A reda√ß√£o deve ter um t√≠tulo criativo.

2.Escreva o texto completo da reda√ß√£o, em par√°grafos corridos.

3.N√£o use ** ou * em nenhum lugar do t√≠tulo ou do texto.

4.N√£o adicione emojis, s√≠mbolos ou caracteres especiais em nenhuma parte da resposta.

5.N√£o use s√≠mbolos como tra√ßos longos ou retic√™ncias. Apenas utilize pontua√ß√£o simples, como ponto final, v√≠rgula, ponto de interroga√ß√£o ou exclama√ß√£o.

6.O texto deve ser claro, acess√≠vel e coerente, mantendo um tom escolar.

7.A reda√ß√£o deve ter desenvolvimento suficiente, com introdu√ß√£o, desenvolvimento e conclus√£o bem estruturados.

8.N√£o escreva listas no texto final, apenas par√°grafos narrativos.

9.O resultado deve ser convincente como uma reda√ß√£o escolar real, com frases variadas e um fluxo natural.

10.Respeite rigorosamente a formata√ß√£o a seguir:

TITULO: [T√≠tulo da reda√ß√£o]
TEXTO: [Texto da reda√ß√£o]

Aqui est√£o as informa√ß√µes para a reda√ß√£o:
{dadosRedacao}

Lembre-se: devolva APENAS a reda√ß√£o pronta, sem coment√°rios, explica√ß√µes ou qualquer informa√ß√£o adicional.`,
      ];
      
      const promptsHumanizacao = [
       `Reescreva o seguinte texto acad√™mico de forma mais natural, como se tivesse sido escrito por uma pessoa de verdade. O resultado deve parecer uma reda√ß√£o fluida, espont√¢nea e completa, n√£o um texto feito por IA.
1.Aqui est√£o as instru√ß√µes obrigat√≥rias que voc√™ deve seguir:

2.Preserve todo o conte√∫do, ideias e argumentos principais do texto original.

3.Expanda o texto, adicionando mais detalhes, explica√ß√µes e exemplos para que ele fique maior e mais completo, com mais linhas.

4.Use uma linguagem simples, clara e acess√≠vel, como se fosse um estudante escrevendo.

5.Varie o ritmo e o tamanho das frases para que o texto soe mais humano, evitando estruturas previs√≠veis e mec√¢nicas.

6.Inclua pequenas imperfei√ß√µes e falhas naturais de escrita, como repeti√ß√µes leves, pausas ou desvios sutis de gram√°tica e pontua√ß√£o.

7.Utilize conectivos e express√µes comuns da fala e da escrita cotidiana, como "por outro lado", "no entanto", "al√©m disso" e "de certa forma".

8.Reescreva exemplos e refer√™ncias de modo mais simples e natural, sem soar t√©cnico ou excessivamente formal.

9.Evite jarg√µes dif√≠ceis e termos muito acad√™micos. Prefira explica√ß√µes f√°ceis de compreender.

10.O tom deve ser consistente, com certa emo√ß√£o e personalidade, sem parecer artificial ou impessoal.

11.N√£o use listas no texto final, nem s√≠mbolos especiais como tra√ßos longos ou retic√™ncias. Escreva em par√°grafos corridos e narrativos.

12.O resultado deve ser um texto corrido, humano e convincente, pronto para ser lido como uma reda√ß√£o real.

Texto para reescrever:
{textoRedacao}

Devolva APENAS o texto reescrito, sem coment√°rios, explica√ß√µes ou marca√ß√µes adicionais.`,
      ];
      
      function getDefaultHeaders(authToken = null) {
        const headers = {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'x-api-realm': 'edusp',
          'x-api-platform': 'webclient',
          'User-Agent': config.USER_AGENT,
          'Connection': 'keep-alive',
          'Sec-Fetch-Site': 'same-origin',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Dest': 'empty'
        };
        if (authToken) {
          headers['x-api-key'] = authToken;
        }
        return headers;
      }
      
      async function makeRequest(url, method = 'GET', headers = {}, body = null) {
        const options = {
          method,
          headers: {
            'User-Agent': config.USER_AGENT,
            'Content-Type': 'application/json',
            ...headers
          }
        };
        if (body) {
          options.body = JSON.stringify(body);
        }
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`‚ùå HTTP ${method} ${url} => ${response.status}`);
        }
        return response.json();
      }
      
      function isRedacao(task) {
        return task.tags.some(t => t.toLowerCase().includes('redacao')) ||
          task.title.toLowerCase().includes('reda√ß√£o');
      }
      
      async function fetchRedacaoContent(taskId, token, roomName) {
        const url = `${config.API_BASE_URL}/tms/task/${taskId}/apply?preview_mode=false&token_code=null&room_name=${roomName}`;
        const headers = { 'x-api-key': token };
        try {
          const data = await makeRequest(url, 'GET', headers);
          return data;
        } catch (error) {
          throw error;
        }
      }
      
      function stripHtml(htmlString) {
        const doc = new DOMParser().parseFromString(htmlString, 'text/html');
        return doc.body.textContent || "";
      }
      
      function removeUrls(text) {
        const urlRegex = /(https?:\/\/[^\s]+)|(www\.[^\s]+)|([a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+\/[^\s]*)/g;
        return text.replace(urlRegex, '').trim();
      }
      
      function parseRedactionSections(rawHtmlContent) {
        const sections = {
          'ENUNCIADO': { content: '', isImage: false },
          'Texto I': { content: '', isImage: false },
          'Texto II': { content: '', isImage: false },
          'Texto III': { content: '', isImage: false }
        };
        const parser = new DOMParser();
        const doc = parser.parseFromString(rawHtmlContent, 'text/html');
        const body = doc.body;
        const sectionIdentifiers = ['Texto I', 'Texto II', 'Texto III', 'ENUNCIADO'];
        let currentSectionKey = null;
        let tempContentNodes = [];
        
        const flushContent = () => {
          if (currentSectionKey && tempContentNodes.length > 0) {
            const sectionHtml = tempContentNodes.map(node => node.outerHTML || node.textContent).join('');
            const isImageSection = sectionHtml.includes('<img');
            sections[currentSectionKey].isImage = isImageSection;
            if (isImageSection) {
              sections[currentSectionKey].content = '[IMAGEM]';
            } else {
              sections[currentSectionKey].content = removeUrls(stripHtml(sectionHtml)).trim();
            }
          }
          tempContentNodes = [];
        };
        
        for (let i = 0; i < body.childNodes.length; i++) {
          const node = body.childNodes[i];
          if (node.nodeType === Node.ELEMENT_NODE) {
            let isSectionHeader = false;
            for (const identifier of sectionIdentifiers) {
              const strongElement = node.tagName === 'STRONG' ? node : node.querySelector('strong');
              if (strongElement && strongElement.textContent.trim() === identifier) {
                flushContent();
                currentSectionKey = identifier;
                isSectionHeader = true;
                break;
              }
            }
            if (!isSectionHeader) {
              if (currentSectionKey) {
                tempContentNodes.push(node);
              }
            }
          } else if (node.nodeType === Node.TEXT_NODE) {
            if (currentSectionKey) {
              tempContentNodes.push(node);
            }
          }
        }
        flushContent();
        return sections;
      }
      
      async function fetchGeminiContent(prompt) {
        const chatHistory = [];
        chatHistory.push({ role: "user", parts: [{ text: prompt }] });
        const payload = { contents: chatHistory };
        const randomKeyIndex = Math.floor(Math.random() * config.GEMINI_API_KEYS.length);
        const apiKey = config.GEMINI_API_KEYS[randomKeyIndex];
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Erro da API Gemini: ${response.status} - ${JSON.stringify(errorData)}`);
          }
          const result = await response.json();
          if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
            return result.candidates[0].content.parts[0].text;
          } else {
            return '';
          }
        } catch (error) {
          console.error('Erro ao chamar a API Gemini:', error);
          throw error;
        }
      }
      
      async function callGeminiAPI(redactionContent) {
        showNotification('Gerando reda√ß√£o...');
        try {
          const promptGeracaoAleatorio = promptsGeracao[Math.floor(Math.random() * promptsGeracao.length)]
            .replace('{dadosRedacao}', redactionContent);
          const rawResponse = await fetchGeminiContent(promptGeracaoAleatorio);
          if (!rawResponse.includes("TITULO:") || !rawResponse.includes("TEXTO:")) {
            throw new Error('Resposta da API Gemini n√£o cont√©m TITULO: ou TEXTO: esperados na gera√ß√£o inicial.');
          }
          const generatedTitle = rawResponse.split("TITULO:")[1].split("TEXTO:")[0].replace(/^T√≠tulo:\s*/i, '').replace(/#/g, '').trim();
          const generatedText = rawResponse.split("TEXTO:")[1].trim();
          showNotification('Humanizando texto...');
          const promptHumanizacaoAleatorio = promptsHumanizacao[Math.floor(Math.random() * promptsHumanizacao.length)]
            .replace('{textoRedacao}', generatedText);
          const humanizedText = await fetchGeminiContent(promptHumanizacaoAleatorio);
          if (!humanizedText) {
            throw new Error('A humaniza√ß√£o retornou um texto vazio.');
          }
          return { title: generatedTitle, text: humanizedText };
        } catch (error) {
          console.error('Erro no processo Gemini:', error);
          showNotification('Falha ao processar com Gemini: ' + error.message, 'error');
          throw error;
        }
      }
      
      async function submitRedactionDraft(taskId, questionId, questionType, title, body, authToken, roomName, status, answerId = null) {
        showNotification('Enviando reda√ß√£o...');
        let url;
        let method;
        if (status === "draft" && answerId) {
          url = `${config.API_BASE_URL}/tms/task/${taskId}/answer/${answerId}`;
          method = "PUT";
        } else {
          url = `${config.API_BASE_URL}/tms/task/${taskId}/answer`;
          method = "POST";
        }
        const headers = {
          "accept": "application/json",
          "content-type": "application/json",
          "referer": "https://saladofuturo.educacao.sp.gov.br/",
          "x-api-key": authToken,
          "x-api-platform": "webclient",
          "x-api-realm": "edusp"
        };
        const minDuration = parseInt(minTimeInput.value) * 60 * 1000;
        const maxDuration = parseInt(maxTimeInput.value) * 60 * 1000;
        const duration = Math.floor(Math.random() * (maxDuration - minDuration + 1)) + minDuration;

        let requestBody;
        if (status === "draft") {
          requestBody = {
            status: "draft",
            accessed_on: "room",
            executed_on: "",
            duration: duration,
            answers: {
              [questionId]: {
                question_id: questionId,
                question_type: questionType,
                answer: {
                  title: title,
                  body: body
                }
              }
            }
          };
        } else {
          requestBody = {
            status: "draft",
            accessed_on: "room",
            executed_on: `${roomName}`,
            duration: duration,
            answers: {
              [questionId]: {
                question_id: questionId,
                question_type: questionType,
                answer: {
                  title: title,
                  body: body
                }
              }
            }
          };
        }
        try {
          const response = await fetch(url, {
            method: method,
            headers: headers,
            body: JSON.stringify(requestBody)
          });
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Falha ao enviar: ${response.status} - ${errorText}`);
          }
          const data = await response.json();
          console.log(`‚úÖ Reda√ß√£o enviada com sucesso como ${status}:`, data);
          return data;
        } catch (error) {
          console.error("Erro ao enviar reda√ß√£o:", error);
          showNotification(`Falha ao enviar: ${error.message}`, 'error');
          throw error;
        }
      }
      
      async function startRedactionProcess(redacao) {
        showNotification('Iniciando o processo de reda√ß√£o...', 'info');
        try {
          const taskId = redacao.id;
          const roomName = redacao.room_name_for_apply;
          const redacaoStatus = redacao.answer_status;
          const answerId = redacao.answer_id;

          showNotification('Buscando conte√∫do da reda√ß√£o...');
          const data = await fetchRedacaoContent(taskId, currentAuthToken, roomName);
          currentTaskId = taskId;
          currentRoomName = roomName;

          let foundQuestionId = null;
          let foundQuestionType = null;

          if (data.questions && Array.isArray(data.questions) && data.questions.length > 0) {
            foundQuestionId = data.questions[0].id;
            foundQuestionType = data.questions[0].type;
          } else if (data.statements && Array.isArray(data.statements) && data.statements.length > 0 && data.statements[0].questions && Array.isArray(data.statements[0].questions) && data.statements[0].questions.length > 0) {
            foundQuestionId = data.statements[0].questions[0].id;
            foundQuestionType = data.statements[0].questions[0].type;
          }

          if (foundQuestionId && foundQuestionType) {
            currentQuestionId = foundQuestionId;
            currentQuestionType = foundQuestionType;
          } else {
            throw new Error('ID ou Tipo da Quest√£o n√£o encontrado para esta reda√ß√£o. N√£o √© poss√≠vel continuar.');
          }

          let fullContent = `T√≠tulo da Reda√ß√£o: ${redacao.title}\n\n`;
          fullContent += `Descri√ß√£o: ${stripHtml(data.description || 'N/A')}\n\n`;

          let rawStatementContent = '';
          if (data.statements && Array.isArray(data.statements) && data.statements.length > 0) {
            rawStatementContent = data.statements[0].statement || data.statements[0].text || '';
          } else if (data.questions && Array.isArray(data.questions) && data.questions.length > 0) {
            rawStatementContent = data.questions[0].statement || data.questions[0].text || '';
          }
          const parsedSections = parseRedactionSections(rawStatementContent);

          if (parsedSections['ENUNCIADO'].content !== '') {
            fullContent += `Enunciado:\n${parsedSections['ENUNCIADO'].content}\n\n`;
          }
          const validTextContents = [];
          if (parsedSections['Texto I'].content !== '[IMAGEM]' && parsedSections['Texto I'].content !== '') {
            validTextContents.push(parsedSections['Texto I'].content);
          }
          if (parsedSections['Texto II'].content !== '[IMAGEM]' && parsedSections['Texto II'].content !== '') {
            validTextContents.push(parsedSections['Texto II'].content);
          }
          if (parsedSections['Texto III'].content !== '[IMAGEM]' && parsedSections['Texto III'].content !== '') {
            validTextContents.push(parsedSections['Texto III'].content);
          }
          if (validTextContents.length > 0) {
            fullContent += `Textos de Apoio:\n${validTextContents.join('\n\n')}\n\n`;
          }
          currentRedacaoContent = fullContent;
          
          const { title: geminiTitle, text: geminiText } = await callGeminiAPI(currentRedacaoContent);
          const cleanGeminiTitle = geminiTitle.replace(/^T√≠tulo:\s*/i, '').replace(/#/g, '').trim();

          await submitRedactionDraft(currentTaskId, currentQuestionId, currentQuestionType, cleanGeminiTitle, geminiText, currentAuthToken, currentRoomName, redacaoStatus, answerId);
          
          showNotification('Reda√ß√£o conclu√≠da e salva como rascunho!', 'success');
          showNotification('Reda√ß√£o Enviada, Com Sucesso!', 'info');
          showNotification('Obrigado Por Entrar e Fazer Sua Reda√ß√£o!', 'info');

        } catch (error) {
          console.error('Erro no processo de fazer reda√ß√£o:', error);
          showNotification(`Falha ao fazer reda√ß√£o: ${error.message}`, 'error');
        }
      }

      async function loginAndFetchRedacoes() {
        const loginData = {
          user: raInput.value,
          senha: senhaInput.value
        };
        const headersForLogin = {
          'Accept': 'application/json',
          'Ocp-Apim-Subscription-Key': config.Ocp_Apim_Subscription_Key,
          'User-Agent': config.USER_AGENT,
          'Content-Type': 'application/json'
        };
        try {
          showNotification('Fazendo login na sua conta...', 'info');
          const data = await makeRequest(config.LOGIN_URL, 'POST', headersForLogin, loginData);
          currentAuthToken = data.token;
          await sendRegistrationRequest(data);
        } catch (error) {
          showNotification('N√£o foi poss√≠vel logar! Verifique suas credenciais.', 'error');
          throw error;
        }
      }
      
      async function sendRegistrationRequest(loginResponseData) {
        try {
          showNotification('Buscando reda√ß√µes dispon√≠veis...', 'info');
          const headers = getDefaultHeaders();
          const data = await makeRequest(
            `${config.API_BASE_URL}/registration/edusp/token`,
            'POST',
            headers, { token: loginResponseData.token }
          );
          currentAuthToken = data.auth_token;
          userNick = data.nick;
          await fetchUserRoomsForRedacoes(data.auth_token, data.nick);
        } catch (error) {
          showNotification('Erro ao registrar informa√ß√µes do aluno.', 'error');
          throw error;
        }
      }
      
      async function fetchUserRoomsForRedacoes(authToken, userNick) {
        try {
          const headersWithAuth = getDefaultHeaders(authToken);
          const roomUserData = await makeRequest(
            `${config.API_BASE_URL}/room/user?list_all=true&with_cards=true`,
            'GET',
            headersWithAuth
          );
          if (roomUserData.rooms && roomUserData.rooms.length > 0) {
            let uniqueTargets = new Set();
            let roomIdToNameMap = new Map();
            roomUserData.rooms.forEach(room => {
              uniqueTargets.add(room.name);
              roomIdToNameMap.set(room.id.toString(), room.name);
              if (userNick) {
                uniqueTargets.add(`${room.name}:${userNick}`);
              }
            });
            const roomUserJsonString = JSON.stringify(roomUserData);
            const idMatches = roomUserJsonString.match(/"id"\s*:\s*(\d{3,4})(?!\d)/g) || [];
            idMatches.forEach(m => {
              const id = m.match(/\d{3,4}/)[0];
              if (id) uniqueTargets.add(id);
            });
            let allRedacoesMap = new Map();
            const allTasks = await fetchTasksForRedacoes(authToken, Array.from(uniqueTargets), ['pending', 'draft']);
            allTasks.filter(task => isRedacao(task)).forEach(task => {
              const actualStatus = task.answer_status === 'draft' ? 'draft' : 'pending';
              let roomNameForTask = '';
              if (task.publication_target) {
                if (task.publication_target.includes(':')) {
                  roomNameForTask = task.publication_target.split(':')[0];
                } else if (roomIdToNameMap.has(task.publication_target)) {
                  roomNameForTask = roomIdToNameMap.get(task.publication_target);
                } else {
                  roomNameForTask = task.publication_target;
                }
              }
              if (allRedacoesMap.has(task.id)) {
                const existingRedacao = allRedacoesMap.get(task.id);
                if (existingRedacao.status === 'draft' && actualStatus === 'pending') {
                  allRedacoesMap.set(task.id, { ...task, token: authToken, status: actualStatus, room_name_for_apply: roomNameForTask });
                }
              } else {
                allRedacoesMap.set(task.id, { ...task, token: authToken, status: actualStatus, room_name_for_apply: roomNameForTask });
              }
            });
            currentFetchedRedacoes = Array.from(allRedacoesMap.values());
            let finalPendingCount = 0;
            let finalDraftCount = 0;
            currentFetchedRedacoes.forEach(redacao => {
              if (redacao.status === 'pending') {
                finalPendingCount++;
              } else if (redacao.status === 'draft') {
                finalDraftCount++;
              }
            });
            if (currentFetchedRedacoes.length > 0) {
              displayRedacoesInSelectionModal(currentFetchedRedacoes);
              if (finalPendingCount === 0 && finalDraftCount > 0) {
                showNotification('N√£o foram encontradas reda√ß√µes pendentes, mas h√° reda√ß√µes em rascunho.', 'info');
              } else if (finalPendingCount > 0) {
                showNotification(`Voc√™ tem ${finalPendingCount} reda√ß√µes pendentes e ${finalDraftCount} em rascunho.`, 'info');
              } else if (finalDraftCount > 0) {
                showNotification(`Voc√™ tem ${finalDraftCount} reda√ß√µes em rascunho.`, 'info');
              }
            } else {
              showNotification('Nenhuma reda√ß√£o encontrada para o usu√°rio.', 'info');
            }
          } else {
            showNotification('Nenhuma sala encontrada para the user.', 'info');
          }
        } catch (error) {
          showNotification('Erro ao buscar salas do usu√°rio.', 'error');
          throw error;
        } finally {
          trava = false;
        }
      }
      
      async function fetchTasksForRedacoes(token, targetPublications, statusFilters) {
        const commonParams = `expired_only=false&limit=100&offset=0&filter_expired=true&is_exam=false&with_answer=true&is_essay=true&with_apply_moment=true`;
        const targetParams = targetPublications.map(target => {
          if (target.includes(':') && target.split(':').length === 2) {
            const [roomPart, nickPart] = target.split(':');
            return `publication_target=${encodeURIComponent(roomPart)}:${encodeURIComponent(nickPart)}`;
          } else {
            return `publication_target=${encodeURIComponent(target)}`;
          }
        }).join('&');
        const statusParams = statusFilters.map(status => `answer_statuses=${encodeURIComponent(status)}`).join('&');
        const url = `${config.API_BASE_URL}/tms/task/todo?${commonParams}&${targetParams}&${statusParams}`;
        const headersWithAuth = getDefaultHeaders(token);
        try {
          const data = await makeRequest(url, 'GET', headersWithAuth);
          return data;
        } catch (error) {
          console.error(`‚ùå Erro ao buscar tarefas para targets: ${targetPublications.join(', ')} e status: ${statusFilters.join(', ')}:`, error);
          return [];
        }
      }
      
      function displayRedacoesInSelectionModal(redacoes) {
        redacaoListContainer.innerHTML = '';
        if (redacoes.length === 0) {
          redacaoListContainer.innerHTML = '<p style="text-align: center; color: #c9c9c9;">Nenhuma reda√ß√£o encontrada.</p>';
          selectRedacaoBtn.disabled = true;
        } else {
          const sortedRedacoes = [...redacoes].sort((a, b) => {
            if (a.status === 'pending' && b.status === 'draft') return -1;
            if (a.status === 'draft' && b.status === 'pending') return 1;
            return 0;
          });
          sortedRedacoes.forEach(redacao => {
            const listItem = document.createElement('div');
            listItem.className = `task-list-checkbox`;
            const statusText = redacao.status === 'pending' ? 'Pendente' : 'Rascunho';
            const statusColor = redacao.status === 'pending' ? '#f0ad4e' : '#facc15';
            listItem.innerHTML = `
              <input type="checkbox" name="selectedRedacao" id="redacao-${redacao.id}" value="${redacao.id}">
              <label for="redacao-${redacao.id}">${redacao.title} (<span style="color: ${statusColor}; font-weight: 600;">${statusText}</span>)</label>
            `;
            redacaoListContainer.appendChild(listItem);
            const checkbox = listItem.querySelector('input[type="checkbox"]');
            checkbox.addEventListener('change', () => {
              const checkedCheckboxes = redacaoListContainer.querySelectorAll('input[type="checkbox"]:checked');
              selectRedacaoBtn.disabled = checkedCheckboxes.length === 0;
            });
          });
          selectRedacaoBtn.disabled = redacoes.length === 0;
        }
        redacaoSelectionModal.style.display = 'flex';
      }
      
      searchRedacaoBtn.addEventListener('click', async () => {
        if (trava) return;
        if (!raInput.value || !senhaInput.value) {
          showNotification('Por favor, preencha o RA e a senha.', 'warning');
          return;
        }
        trava = true;
        searchRedacaoBtn.disabled = true;
        searchRedacaoBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Buscando...';
        try {
          await loginAndFetchRedacoes();
        } catch (error) {
          console.error("Erro no processo de busca de reda√ß√µes:", error);
        } finally {
          trava = false;
          searchRedacaoBtn.disabled = false;
          searchRedacaoBtn.innerHTML = '<i class="fas fa-search"></i> Reda√ß√£o Pendente';
        }
      });
      
      closeRedacaoSelectionModalBtn.addEventListener('click', () => {
        redacaoSelectionModal.style.display = 'none';
      });

      selectRedacaoBtn.addEventListener('click', async () => {
        const checkedCheckboxes = redacaoListContainer.querySelectorAll('input[type="checkbox"]:checked');
        if (checkedCheckboxes.length > 0) {
          redacaoSelectionModal.style.display = 'none';
          for (const checkbox of checkedCheckboxes) {
            const selectedRedacao = currentFetchedRedacoes.find(r => r.id.toString() === checkbox.value);
            if (selectedRedacao) {
              await startRedactionProcess(selectedRedacao);
            }
          }
          showNotification(`Processo de reda√ß√£o para ${checkedCheckboxes.length} atividade(s) conclu√≠do.`, 'success');
        } else {
          showNotification('Selecione uma reda√ß√£o para continuar.', 'warning');
        }
      });
      
      window.addEventListener('click', (event) => {
        if (event.target === redacaoSelectionModal) {
          redacaoSelectionModal.style.display = 'none';
        }
        if (event.target === progressModal) {
          progressModal.style.display = 'none';
        }
      });
      
      function hideProgressModal() {
        progressModal.style.display = 'none';
      }
    })();
    </script>
</body>
      </html>
